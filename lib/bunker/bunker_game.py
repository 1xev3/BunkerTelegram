import discord
from typing import List, Dict, Optional
import logging
import re

from lib.ai_client import G4FClient
from lib.bunker.player import Player
from lib.bunker.bunker import Bunker
from lib.bunker.image_generator import ImageGenerator



class BunkerGame:
    """–ö–ª–∞—Å—Å, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π"""
    
    def __init__(self, ai_client: G4FClient, admin_id: int, channel_id: int):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
        
        Args:
            admin_id: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–≥—Ä—ã
            channel_id: ID –∫–∞–Ω–∞–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç –∏–≥—Ä–∞
        """
        self.ai_client = ai_client

        self.admin_id = admin_id
        self.channel_id = channel_id
        self.message_id = None
        self.admin_message_id = None
        self.vote_message_id = None
        self.status = "waiting"  # waiting, running, finished
        self.players: List[Player] = []
        self.bunker = Bunker(self.ai_client)
        self.current_round = 0
        self.votes = {}  # {voter_id: voted_for_id}
        self.voted_players = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ ID –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        self.active_voting_players = 0  # –°—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    
    def add_player(self, player: Player) -> None:
        """
        –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –∏–≥—Ä—É
        
        Args:
            player: –û–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞
        """
        self.players.append(player)
    
    def remove_player(self, player_id: int) -> bool:
        """
        –£–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ –∏–≥—Ä—ã
        
        Args:
            player_id: ID –∏–≥—Ä–æ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            bool: True, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω, False, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        for player in self.players:
            if player.id == player_id:
                player.is_active = False
                return True
        return False
    
    async def generate_bunker(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—É–Ω–∫–µ—Ä–∞"""

        async for status_msg in self.bunker.generate():
            logging.info(status_msg)
            yield status_msg
    
    async def generate_player_cards(self) -> None:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤"""
        for player in self.players:
            await player.generate_character(self.ai_client)
    
    def generate_status_image(self) -> discord.File:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–∞–±–ª–∏—Ü–µ–π —Å—Ç–∞—Ç—É—Å–æ–≤
        
        Returns:
            discord.File: –§–∞–π–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç—É—Å–æ–≤
        """
        return ImageGenerator.generate_status_image(self.players)
    
    def next_round(self) -> int:
        """
        –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
        
        Returns:
            int: –ù–æ–º–µ—Ä –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        """
        self.current_round += 1
        return self.current_round
    
    def get_active_players(self) -> List[Player]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        
        Returns:
            List[Player]: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        """
        return [player for player in self.players if player.is_active]
    
    def get_player_by_id(self, player_id: int) -> Optional[Player]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –ø–æ ID
        
        Args:
            player_id: ID –∏–≥—Ä–æ–∫–∞
            
        Returns:
            Optional[Player]: –û–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        for player in self.players:
            if player.id == player_id:
                return player
        return None
    
    def reset_votes(self) -> None:
        """–°–±—Ä–æ—Å –≥–æ–ª–æ—Å–æ–≤"""
        self.votes = {}
        self.voted_players = set()
    
    def add_vote(self, voter_id: int, target_id: int) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞
        
        Args:
            voter_id: ID –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            target_id: ID –∏–≥—Ä–æ–∫–∞, –∑–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –≥–æ–ª–æ—Å—É—é—Ç
            
        Returns:
            bool: True, –µ—Å–ª–∏ –≥–æ–ª–æ—Å —É—Å–ø–µ—à–Ω–æ —É—á—Ç–µ–Ω, False, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª
        """
        if voter_id in self.voted_players:
            return False
        
        self.votes[voter_id] = target_id
        self.voted_players.add(voter_id)
        return True
    
    def count_votes(self) -> Dict[int, int]:
        """
        –ü–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤
        
        Returns:
            Dict[int, int]: –°–ª–æ–≤–∞—Ä—å {ID –∏–≥—Ä–æ–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤}
        """
        results = {}
        for target_id in self.votes.values():
            results[target_id] = results.get(target_id, 0) + 1
        return results

    async def end_game(self, bot, winner=None, reason="") -> None:
        """
        –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        
        Args:
            bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ Discord
            winner: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞-–ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            reason: –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        """
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            logger = logging.getLogger('bunker_game')
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã
            self.status = "finished"
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            channel = bot.get_channel(self.channel_id)
            if not channel:
                logger.error(f"–û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª {self.channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã")
                return
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
            for player in self.players:
                for attribute in ["gender", "body", "trait", "profession", "health", 
                                "hobby", "phobia", "inventory", "backpack", "additional"]:
                    player.reveal_attribute(attribute)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ –æ–±—â–∏–π —á–∞—Ç
            status_image_bytes = self.generate_status_image()
            status_image = discord.File(status_image_bytes, filename='status.png')
            await channel.send("üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤:", file=status_image)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ
            if winner:
                winner_embed = discord.Embed(
                    title="üèÜ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                    description=f"**{winner.name}** - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–∂–∏–≤—à–∏–π –≤ –±—É–Ω–∫–µ—Ä–µ! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!",
                    color=discord.Color.gold()
                )
                await channel.send(embed=winner_embed)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é –≤ –õ–°
                try:
                    winner_user = bot.get_user(winner.id)
                    if winner_user:
                        dm_channel = await winner_user.create_dm()
                        winner_dm_embed = discord.Embed(
                            title="üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!",
                            description="–í—ã —Å—Ç–∞–ª–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–∂–∏–≤—à–∏–º –≤ –±—É–Ω–∫–µ—Ä–µ!",
                            color=discord.Color.gold()
                        )
                        await dm_channel.send(embed=winner_dm_embed)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—é: {e}")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –ø—Ä–æ—Å—Ç–æ –æ–±—ä—è–≤–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                active_players = self.get_active_players()
                player_names = ", ".join([p.name for p in active_players])
                
                end_embed = discord.Embed(
                    title="üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                    description=f"–ò–≥—Ä–∞ '–ë—É–Ω–∫–µ—Ä' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã–∂–∏–≤—à–∏–µ –≤ –±—É–Ω–∫–µ—Ä–µ: {player_names}",
                    color=discord.Color.blue()
                )
                
                if reason:
                    end_embed.description += f"\n\n–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {reason}"
                
                await channel.send(embed=end_embed)
            
            # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é globals() –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—â–µ–≥–æ –º–æ–¥—É–ª—è
            # –≠—Ç–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è active_games –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –∏–º–µ–Ω
            try:
                import sys
                main_module = sys.modules.get('__main__')
                if hasattr(main_module, 'active_games') and self.channel_id in main_module.active_games:
                    del main_module.active_games[self.channel_id]
                    logger.info(f"–ò–≥—Ä–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –≤ –∫–∞–Ω–∞–ª–µ {self.channel_id}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {e}")
            
            logger.info(f"–ò–≥—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ {self.channel_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞" + (f": {reason}" if reason else ""))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤—ã–∂–∏–≤–∞–Ω–∏—è –≤ –±—É–Ω–∫–µ—Ä–µ —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –∏–≥—Ä–æ–∫–∞–º–∏
            if self.get_active_players():
                # await channel.send("üß† –ê —Ç–µ–ø–µ—Ä—å –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —à–∞–Ω—Å—ã —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ...")
                await self.analyze_bunker_survival(bot)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã: {e}")

    async def analyze_bunker_survival(self, bot) -> None:
        """
        –ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —à–∞–Ω—Å–æ–≤ –≤—ã–∂–∏–≤–∞–Ω–∏—è –±—É–Ω–∫–µ—Ä–∞ —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–∞–≤–æ–º –∏–≥—Ä–æ–∫–æ–≤
        
        Args:
            bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ Discord –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
            channel = bot.get_channel(self.channel_id)
            if not channel:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
            active_players = self.get_active_players()
            if not active_players:
                await channel.send("–ù–µ–∫–æ–º—É –≤—ã–∂–∏–≤–∞—Ç—å –≤ –±—É–Ω–∫–µ—Ä–µ!")
                return
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            analyzing_message = await channel.send("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —à–∞–Ω—Å—ã –≤—ã–∂–∏–≤–∞–Ω–∏—è –æ–±–∏—Ç–∞—Ç–µ–ª–µ–π –±—É–Ω–∫–µ—Ä–∞...")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É–Ω–∫–µ—Ä–µ
            bunker_info = self.bunker.get_description()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∂–∏–≤—à–∏—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
            survivors_info = []
            for i, player in enumerate(active_players, 1):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
                player_card = player.get_character_card()
                survivors_info.append(f"**–ò–≥—Ä–æ–∫ {i}: {player.name}**\n{player_card}")
            
            survivors_text = "\n\n".join(survivors_info)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —à–∞–Ω—Å—ã –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ª—é–¥–µ–π –≤ –±—É–Ω–∫–µ—Ä–µ –ø—Ä–∏ –¥–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.
            
–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–ê–¢–ê–°–¢–†–û–§–ï –ò –ë–£–ù–ö–ï–†–ï:
{bunker_info}

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–´–ñ–ò–í–®–ò–• –í –ë–£–ù–ö–ï–†–ï ({len(active_players)} —á–µ–ª–æ–≤–µ–∫):
{survivors_text}

–û—Ü–µ–Ω–∏ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
1. –ö–∞–∫–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –º–µ–∂–¥—É –æ–±–∏—Ç–∞—Ç–µ–ª—è–º–∏ –±—É–Ω–∫–µ—Ä–∞
2. –°–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
3. –ü–æ—Å—á–∏—Ç–∞–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∂–∏–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            survival_analysis = await self.ai_client.generate_message([
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤—ã–∂–∏–≤–∞–Ω–∏—é. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —à–∞–Ω—Å—ã –≤—ã–∂–∏—Ç—å –≥—Ä—É–ø–ø–µ –ª—é–¥–µ–π –≤ –±—É–Ω–∫–µ—Ä–µ –≤ —É—Å–ª–æ–≤–∏—è—Ö –ø–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å–∞. –û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ, —É—á–∏—Ç—ã–≤–∞–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–π, –Ω–∞–≤—ã–∫–æ–≤ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –ª—é–¥–µ–π."},
                {"role": "user", "content": prompt}
            ])
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞
            try:
                await analyzing_message.delete()
            except:
                pass
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ —á–∞—Å—Ç–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            await self._send_analysis_results(channel, survival_analysis)
        except Exception as e:
            import logging
            logger = logging.getLogger('bunker_game')
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤—ã–∂–∏–≤–∞–Ω–∏—è –±—É–Ω–∫–µ—Ä–∞: {e}")
            try:
                await channel.send(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤—ã–∂–∏–≤–∞–Ω–∏—è: {e}")
            except:
                pass
    
    async def _send_analysis_results(self, channel, analysis_text):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ –∫–∞–Ω–∞–ª, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        
        Args:
            channel: –ö–∞–Ω–∞–ª Discord –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            analysis_text: –¢–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        """
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –æ–¥–Ω–æ–º embed
        MAX_EMBED_LENGTH = 1000
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è embed
        title = "üîç –ê–Ω–∞–ª–∏–∑ –≤—ã–∂–∏–≤–∞–Ω–∏—è –≤ –±—É–Ω–∫–µ—Ä–µ"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(analysis_text) <= MAX_EMBED_LENGTH:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            embed = discord.Embed(
                title=title,
                description=analysis_text,
                color=discord.Color.blue()
            )
            await channel.send(embed=embed)
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–µ —á–∞—Å—Ç–∏, —Å—Ç–∞—Ä–∞—è—Å—å –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            parts = []
            
            # –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—Ç—å –∏—Ö
            # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–æ—á–∫–∞–º, –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∏ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞–∫–∞–º
            sentences = re.split(r'(?<=[.!?]) +', analysis_text)
            
            current_part = ""
            
            for sentence in sentences:
                # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–∞–º–æ –ø–æ —Å–µ–±–µ –¥–ª–∏–Ω–Ω–µ–µ MAX_EMBED_LENGTH, –µ–≥–æ –ø—Ä–∏–¥–µ—Ç—Å—è —Ä–∞–∑–±–∏—Ç—å
                if len(sentence) > MAX_EMBED_LENGTH:
                    # –ï—Å–ª–∏ –≤ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏ —É–∂–µ —á—Ç–æ-—Ç–æ –µ—Å—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë
                    if current_part:
                        parts.append(current_part)
                        current_part = ""
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤–∞–º
                    words = sentence.split()
                    temp_part = ""
                    
                    for word in words:
                        if len(temp_part) + len(word) + 1 <= MAX_EMBED_LENGTH:
                            temp_part += (word + " ")
                        else:
                            parts.append(temp_part.strip())
                            temp_part = word + " "
                    
                    if temp_part:
                        current_part = temp_part.strip()
                else:
                    # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —á–∞—Å—Ç—å
                    if len(current_part) + len(sentence) + 1 > MAX_EMBED_LENGTH:
                        parts.append(current_part)
                        current_part = sentence
                    else:
                        if current_part:
                            current_part += " " + sentence
                        else:
                            current_part = sentence
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
            if current_part:
                parts.append(current_part)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π embed
            for i, part in enumerate(parts):
                part_title = f"{title} (–ß–∞—Å—Ç—å {i+1}/{len(parts)})"
                embed = discord.Embed(
                    title=part_title,
                    description=part,
                    color=discord.Color.blue()
                )
                await channel.send(embed=embed) 